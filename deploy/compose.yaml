# Compose file for cired.digital
#
# Changes:
# - Replace ./env by ${ENV_DIR:?ENV_DIR not set}
#     Define ENV_DIR in .env to point where the secrets are stored
#     Fails with explicit error message if not set
#     It can be specified on the command line
#     Allows to store secrets out of repo
#     Allows to use upstream configuration for testing
# - Prefix volumes names
# - Define fully qualified images
#     Schema is <registry>/<namespace>/<repository>:tag
#     This is more secure against hijacking
# - Always run postgres (delete profile section)
# - Add nginx-proxy-manager (NPM) to dispatch incoming connexions
# - Partition in two networks:
#     internal    for services that need to talk to each other
#     npm_network for services that need to talk to outside, via NPM
#

volumes:
  hatchet_certs:
    name: cidir2r_hatchet_certs
  hatchet_config:
    name: cidir2r_hatchet_config
  hatchet_api_key:
    name: cidir2r_hatchet_api_key
  hatchet_rabbitmq_data:
    name: cidir2r_hatchet_rabbitmq_data
  hatchet_rabbitmq_conf:
    name: cidir2r_hatchet_rabbitmq_conf
  hatchet_postgres_data:
    name: cidir2r_hatchet_postgres_data
  minio_data:
    name: cidir2r_minio_data
  postgres_data:
    name: cidir2r_postgres_data
  npm_data:
    name: cidir2r_npm_data
  npm_ssl:
    name: cidir2r_npm_ssl

networks:
  internal:
    internal: true
    name: cidir2r_internal_network
  npm_network:
    name: cidir2r_npm_network

services:
  #
  # Database services
  #
  postgres:
    image: docker.io/pgvector/pgvector:pg16
    networks:
      - internal
    expose:
      - 5432
    env_file:
      - ${ENV_DIR:?ENV_DIR not set}/postgres.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    command: >
      postgres
      -c max_connections=1024
      -c shared_preload_libraries=''
      -c log_statement=all
      -c log_connections=on
      -c log_disconnections=on

  hatchet-postgres:
    image: docker.io/library/postgres:latest
    networks:
    - internal
    env_file:
      - ${ENV_DIR:?ENV_DIR not set}/hatchet.env
    volumes:
      - hatchet_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hatchet_user -d hatchet"]
      interval: 10s
      timeout: 5s
      retries: 5

  #
  # Storage service
  #
  minio:
    image: docker.io/minio/minio
    profiles:
    - minio
    networks:
    - internal
    expose:
    - 9000
    # We do not expose the console port 9001 since we do not use it
    env_file:
      - ${ENV_DIR:?ENV_DIR not set}/minio.env
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    command: server /data --console-address ":9001"

  #
  # Message Queue
  #
  hatchet-rabbitmq:
    image: docker.io/library/rabbitmq:3-management
    hostname: "hatchet-rabbitmq"
    networks:
    - internal
#    ports:
#      - "5673:5672"
#      - "15673:15672"
    expose:
    - 5672
    - 15672
    env_file:
      - ${ENV_DIR:?ENV_DIR not set}/hatchet.env
    volumes:
      - hatchet_rabbitmq_data:/var/lib/rabbitmq
      - hatchet_rabbitmq_conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  #
  # Tasks manager
  #
  hatchet-create-db:
    image: docker.io/library/postgres:latest
    networks:
    - internal
    volumes:
      - ./scripts:/scripts
    env_file:
      - ${ENV_DIR:?ENV_DIR not set}/hatchet.env
    command: sh /scripts/create-hatchet-db.sh

  hatchet-migration:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-migrate:v0.53.15
    networks:
    - internal
    env_file:
      - ${ENV_DIR:?ENV_DIR not set}/hatchet.env
    depends_on:
      hatchet-create-db:
        condition: service_completed_successfully

  hatchet-setup-config:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:v0.53.15
    networks:
    - internal
    env_file:
      - ${ENV_DIR:?ENV_DIR not set}/hatchet.env
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    depends_on:
      hatchet-migration:
        condition: service_completed_successfully
      hatchet-rabbitmq:
        condition: service_healthy
    command: /hatchet/hatchet-admin quickstart --skip certs --generated-config-dir /hatchet/config --overwrite=false

  hatchet-engine:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-engine:v0.53.15
    networks:
    - internal
    expose:
      - 7077
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully
    env_file:
      - ${ENV_DIR:?ENV_DIR not set}/hatchet.env
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8733/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: /hatchet/hatchet-engine --config /hatchet/config
    restart: on-failure

  hatchet-dashboard:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-dashboard:v0.53.15
    networks:
    - internal
    - npm_network
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully
    env_file:
      - ${ENV_DIR:?ENV_DIR not set}/hatchet.env
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    # For prod, firewall 7274 and let NPM handle
    ports:
      - "7274:80"
    command: sh ./entrypoint.sh --config /hatchet/config
    restart: on-failure

  setup-token:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:v0.53.15
    networks:
    - internal
    volumes:
      - ./scripts:/scripts
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
      - hatchet_api_key:/hatchet_api_key
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully
    command: sh /scripts/setup-token.sh

  #
  # AI/ML tools
  #
  unstructured:
    image: docker.io/ragtoriches/unst-prod:latest
    networks:
      - internal
    expose:
      - 7275
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7275/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  graph_clustering:
    image: docker.io/ragtoriches/cluster-prod
    networks:
      - internal
    expose:
      - 7276
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7276/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  #
  # RAG engine
  #
  r2r:
    image: docker.io/sciphiai/r2r:latest
    networks:
      - internal
      - npm_network
    # For prod, firewall 7272 and let NPM handle
    ports:
      - "7272:7272"
    env_file:
      - ${ENV_DIR:?ENV_DIR not set}/r2r-full.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7272/v3/health"]
      interval: 6s
      timeout: 5s
      retries: 5
    volumes:
      - ./user_configs:/app/user_configs
      - hatchet_api_key:/hatchet_api_key:ro
      - ./scripts:/scripts
    extra_hosts:
      # Broken on Linux
      # - host.docker.internal:host-gateway
      - host.docker.internal:[127.0.0.1]
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
    depends_on:
      setup-token:
        condition: service_completed_successfully
      unstructured:
        condition: service_healthy
      graph_clustering:
        condition: service_healthy
    # Logging stack removed in May 2025
    command: sh /scripts/start-r2r.sh
    restart: on-failure

  r2r-dashboard:
    image: docker.io/sciphiai/r2r-dashboard:1.0.3
    env_file:
      - ${ENV_DIR:?ENV_DIR not set}/r2r-dashboard.env
    networks:
    - internal
    - npm_network
    # For prod, firewall 7273 and let NPM handle
    ports:
      - "7273:3000"

  #
  # Our app
  #
  monitoring:
    build:
      context: ../src/analytics
    networks:
      - npm_network
    # For prod, firewall 7277 and let NPM handle
    ports:
      - "7277:7277"
    volumes:
      - ../src/analytics/monitor.py:/app/monitor.py
      - ../reports/analytics-logs:/app/data/logs
    restart: unless-stopped
    command: uvicorn monitor:app --host 0.0.0.0 --port 7277 --reload

  frontend:
    image: nginx:alpine
    networks:
      - npm_network
    # For dev, access http://localhost:8080.
    # For prod, firewall 8080 and let NPM handle
    ports:
      - "8080:80"
    volumes:
      - ../src/frontend:/usr/share/nginx/html:ro

  #
  # Proxy for incoming connection
  #
  nginx-proxy-manager:
    image: docker.io/jc21/nginx-proxy-manager:latest
    restart: unless-stopped
    networks:
      - npm_network
    # For prod, firewall everything but ports 80, 81, 443.
    ports:
      - "80:80"     # HTTP traffic
      - "443:443"   # HTTPS traffic
      - "81:81"     # NPM Admin interface
    volumes:
      - npm_data:/data
      - npm_ssl:/etc/letsencrypt
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
      DISABLE_IPV6: 'true'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:81/api/nginx/proxy-hosts"]
      interval: 30s
      timeout: 10s
      retries: 5
