# Change: Prefix volumes names

volumes:
  hatchet_certs:
    name: ${PROJECT_NAME}_hatchet_certs
  hatchet_config:
    name: ${PROJECT_NAME}_hatchet_config
  hatchet_api_key:
    name: ${PROJECT_NAME}_hatchet_api_key
  hatchet_rabbitmq_data:
    name: ${PROJECT_NAME}_hatchet_rabbitmq_data
  hatchet_rabbitmq_conf:
    name: ${PROJECT_NAME}_hatchet_rabbitmq_conf
  hatchet_postgres_data:
    name: ${PROJECT_NAME}_hatchet_postgres_data
  minio_data:
    name: ${PROJECT_NAME}_minio_data
  postgres_data:
    name: ${PROJECT_NAME}_postgres_data

# Changes:
# - Use env_files from credentials/ out of repo, they are full of secrets
# - Fully define paths to images, for security

services:
  postgres:
    image: docker.io/pgvector/pgvector:pg16
    profiles: [postgres]
    env_file:
      - ../../credentials/postgres-cidi.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    command: >
      postgres
      -c max_connections=1024

  minio:
    image: docker.io/minio/minio
    profiles: [minio]
    env_file:
      - ../../credentials/minio-cidi.env
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    command: server /data --console-address ":9001"

  hatchet-postgres:
    image: docker.io/library/postgres:latest
    env_file:
      - ../../credentials/hatchet-cidi.env
    volumes:
      - hatchet_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hatchet_user -d hatchet"]
      interval: 10s
      timeout: 5s
      retries: 5

  hatchet-rabbitmq:
    image: docker.io/library/rabbitmq:3-management
    hostname: "hatchet-rabbitmq"
    ports:
      - "5673:5672"
      - "15673:15672"
    env_file:
      - ../../credentials/hatchet-cidi.env
    volumes:
      - hatchet_rabbitmq_data:/var/lib/rabbitmq
      - hatchet_rabbitmq_conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  hatchet-create-db:
    image: docker.io/library/postgres:latest
    command: sh /scripts/create-hatchet-db.sh
    volumes:
      - ./scripts:/scripts
    env_file:
      - ../../credentials/hatchet-cidi.env

  hatchet-migration:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-migrate:v0.53.15
    env_file:
      - ../../credentials/hatchet-cidi.env
    depends_on:
      hatchet-create-db:
        condition: service_completed_successfully

  hatchet-setup-config:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:v0.53.15
    command: /hatchet/hatchet-admin quickstart --skip certs --generated-config-dir /hatchet/config --overwrite=false
    env_file:
      - ../../credentials/hatchet-cidi.env
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    depends_on:
      hatchet-migration:
        condition: service_completed_successfully
      hatchet-rabbitmq:
        condition: service_healthy

  hatchet-engine:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-engine:v0.53.15
    command: /hatchet/hatchet-engine --config /hatchet/config
    restart: on-failure
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully
    ports:
      - "7077:7077"
    env_file:
      - ../../credentials/hatchet-cidi.env
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8733/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  hatchet-dashboard:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-dashboard:v0.53.15
    command: sh ./entrypoint.sh --config /hatchet/config
    restart: on-failure
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully
    env_file:
      - ../../credentials/hatchet-cidi.env
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    ports:
      - "7274:80"

  setup-token:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:v0.53.15
    command: sh /scripts/setup-token.sh
    volumes:
      - ./scripts:/scripts
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
      - hatchet_api_key:/hatchet_api_key
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully

  unstructured:
    image: docker.io/ragtoriches/unst-prod:latest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7275/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  graph_clustering:
    image: docker.io/ragtoriches/cluster-prod
    ports:
      - "7276:7276"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7276/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  r2r:
    image: docker.io/sciphiai/r2r:latest
    ports:
      - "7272:7272"
    env_file:
      - ../../credentials/r2r-cidi.env
    command: sh /scripts/start-r2r.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7272/v3/health"]
      interval: 6s
      timeout: 5s
      retries: 5
    restart: on-failure
    volumes:
      - ./user_configs:/app/user_configs
      - ./user_tools:/app/user_tools
      - hatchet_api_key:/hatchet_api_key:ro
      - ./scripts:/scripts
    extra_hosts:
      # Broken on Linux
      # - host.docker.internal:host-gateway
      - host.docker.internal:[127.0.0.1]
    depends_on:
      setup-token:
        condition: service_completed_successfully
      unstructured:
        condition: service_healthy
      graph_clustering:
        condition: service_healthy
    # Logging stack removed in May 2025
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"

  r2r-dashboard:
    image: docker.io/sciphiai/r2r-dashboard:1.0.3
    env_file:
      - ../../credentials/r2r-dashboard-cidi.env
    ports:
      - "7273:3000"

  # Our analytics
  feedback:
    build:
      context: ../analytics
    ports:
      - "7275:7275"
    volumes:
      - ../analytics/feedback_server.py:/app/feedback_server.py
    command: uvicorn feedback_server:app --host 0.0.0.0 --port 7275 --reload
    restart: unless-stopped

  frontend:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ../frontend:/usr/share/nginx/html:ro
